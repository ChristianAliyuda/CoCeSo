package at.wrk.coceso.dao.mapper;

import at.wrk.coceso.entity.*;
import at.wrk.coceso.entity.enums.IncidentType;
import at.wrk.coceso.entity.enums.LogEntryType;
import at.wrk.coceso.entity.enums.TaskState;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import java.sql.ResultSet;
import java.sql.SQLException;

@Repository
public class LogMapper implements RowMapper<LogEntry> {

  @Override
  public LogEntry mapRow(ResultSet rs, int i) throws SQLException {
    LogEntry l = new LogEntry();

    l.setId(rs.getInt("id"));
    l.setAutoGenerated(rs.getBoolean("autoGenerated"));
    l.setText(rs.getString("text"));
    l.setTimestamp(rs.getTimestamp("timestamp"));
    l.setJson(rs.getString("json"));

    try {
      l.setState(TaskState.valueOf(rs.getString("taskstate")));
    } catch (NullPointerException e) {
      l.setState(null);
    }

    try {
      l.setType(LogEntryType.valueOf(rs.getString("type")));
    } catch (NullPointerException e) {
      l.setType(null);
    }

    Operator user = new Operator();
    user.setId(rs.getInt("operator_fk"));
    user.setSur_name(rs.getString("sur_name"));
    user.setGiven_name(rs.getString("given_name"));
    user.setdNr(rs.getInt("dNr"));
    user.setContact(rs.getString("contact"));
    user.setUsername(rs.getString("username"));
    l.setUser(user);

    int incidentID = rs.getInt("incident_fk");
    if (incidentID > 0) {
      Incident inc = new Incident(incidentID);
      inc.setBlue(rs.getBoolean("blue"));
      try {
        inc.setType(IncidentType.valueOf(rs.getString("itype")));
      } catch (NullPointerException e) {
        inc.setType(null);
      }

      String loc;
      loc = rs.getString("bo");
      inc.setBo(loc != null ? new Point(loc) : null);
      loc = rs.getString("ao");
      inc.setAo(loc != null ? new Point(loc) : null);

      l.setIncident(inc);
    }

    int unitID = rs.getInt("unit_fk");
    if (unitID > 0) {
      l.setUnit(new Unit(unitID));
      l.getUnit().setCall(rs.getString("call"));
    }

    l.setConcern(null); // Entries are 'final', concern is only in DB relevant TODO Change if used internally

    return l;
  }
}
