package at.wrk.coceso.controller.view;

import at.wrk.coceso.dao.ConcernDao;
import at.wrk.coceso.entity.Concern;
import at.wrk.coceso.entity.Incident;
import at.wrk.coceso.entity.Operator;
import at.wrk.coceso.entity.Unit;
import at.wrk.coceso.service.IncidentService;
import at.wrk.coceso.service.UnitService;
import at.wrk.coceso.utils.Logger;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.security.Principal;

@Controller
@RequestMapping("/finalReport")
public class FinalReportController {

    @Autowired
    ConcernDao concernDao;

    @Autowired
    UnitService unitService;

    @Autowired
    IncidentService incidentService;

    private Concern concern;
    private Operator user;
    private java.util.List<Unit> unitList;
    private java.util.List<Incident> incidentList;

    @RequestMapping(value = "report.pdf", produces = "application/pdf")
    public void print(HttpServletResponse response, @RequestParam(value = "id") int id, Principal principal){

        user = (Operator) ((UsernamePasswordAuthenticationToken)principal).getPrincipal();

        /*int id;
        try {
            id = Integer.parseInt(s_id);
        } catch (NumberFormatException e) {
            throw new ConcernNotFoundException();
        }  */


        concern = concernDao.getById(id);
        if(concern == null) {
            //TODO Error Handling
            return;
        }


        unitList = unitService.getAll(id);
        incidentList = incidentService.getAll(id);

        Document document = new Document();

        //response.setContentType("application/pdf");
        try {
            PdfWriter.getInstance(document, response.getOutputStream());
            document.open();

            addMeta(document);
            addFrontPage(document);
        }
        catch(IOException e) {
            Logger.error("FinalReportController:print(): " + e.getMessage());
        }
        catch(DocumentException e) {
            Logger.error("FinalReportController:print(): "+e.getMessage());
        }
        finally {
            document.close();
        }

    }

    private static Font titleFont = new Font(Font.FontFamily.TIMES_ROMAN, 24,
            Font.BOLD);
    private static Font subTitleFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
            Font.NORMAL);
    private static Font defFont = new Font(Font.FontFamily.TIMES_ROMAN, 11);

    private void addMeta(Document document) throws DocumentException {
        document.addTitle("Abschlussbericht der Ambulanz " + concern.getName());
        document.addAuthor("CoCeSo");
        document.addCreator("CoCeSo - "); //TODO User
    }

    private void addFrontPage(Document document) throws DocumentException {
        Paragraph preface = new Paragraph();
        addEmptyLine(preface, 1);

        Paragraph p0 = new Paragraph("Abschlussbericht der Ambulanz " + concern.getName(), titleFont);
        p0.setAlignment(Element.ALIGN_CENTER);
        preface.add(p0);

        addEmptyLine(preface, 1);

        Paragraph p1 = new Paragraph("Report generated by: " + user.getGiven_name() + " " + user.getSur_name(), subTitleFont);
        p1.setAlignment(Element.ALIGN_CENTER);
        preface.add(p1);

        addEmptyLine(preface, 3);
        preface.add(new Paragraph("To be filled with Information ", defFont));

        document.add(preface);
        document.newPage();
    }

    private void addStatistics(Document document) throws DocumentException {

    }

    private void addUnitStats(Document document) throws DocumentException {

    }

    private void addIncidentStats(Document document) throws DocumentException {

    }

    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }

    @ExceptionHandler(ConcernNotFoundException.class)
    public String error() {
        return "redirect:/welcome";
    }

    private class ConcernNotFoundException extends Error {
    }
}
