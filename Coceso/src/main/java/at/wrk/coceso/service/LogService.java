package at.wrk.coceso.service;


import at.wrk.coceso.dao.LogDao;
import at.wrk.coceso.entity.*;
import at.wrk.coceso.entity.enums.LogEntryType;
import at.wrk.coceso.entity.helper.JsonContainer;
import at.wrk.coceso.utils.Logger;
import org.codehaus.jackson.map.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Service
public class LogService {
    @Autowired
    LogDao logDao;

    public void logFull(Operator user, LogEntryType type, int activeCase, Unit unit, Incident incident, boolean autoGenerated) {
        if(user == null) {
            Logger.error("LogService called without 'user'!");
            return;
        }
        LogEntry logEntry = new LogEntry();

        logEntry.setUser(user);
        logEntry.setText(type.getMessage());
        logEntry.setType(type);
        logEntry.setUnit(unit);
        logEntry.setIncident(incident);
        logEntry.setAutoGenerated(autoGenerated);

        logEntry.setConcern(new Concern());
        logEntry.getConcern().setId(activeCase);
        logEntry.setState(incident != null && incident.getUnits() != null && unit != null ?
                incident.getUnits().get(unit.getId()) : null);

        ObjectMapper mapper = new ObjectMapper();

        try {
            logEntry.setJson(mapper.writeValueAsString(new JsonContainer(unit, incident)));
        } catch (IOException e) {
            e.printStackTrace();
        }

        logDao.add(logEntry);

    }

    public void logWithIDs(int user_id, LogEntryType type, int activeCase, int unit_id, int incident_id, boolean auto) {
        if(user_id < 1)
            return;
        logDao.add(activeCase, unit_id, incident_id, auto, user_id, type);
    }

    public void logByUser(Operator user, String text, int activeCase) {
        logFull(user, LogEntryType.CUSTOM.customMessage(text), activeCase, null, null, false);
    }

    public List<LogEntry> getLast(int case_id, int count) {
        if(count < 1 || case_id < 1) {
            return null;
        }
        return logDao.getLast(case_id, count);
    }

    public List<LogEntry> getByIncidentId(int inc_id) {
        if(inc_id < 1) {
            return null;
        }
        return logDao.getByIncidentId(inc_id);
    }

    public List<LogEntry> getByUnitId(int id) {
        return logDao.getByUnitId(id);
    }
}
